{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOvb+AlYIv1siME49jxfTq7",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SreenidhiCodes/todo-cli-python/blob/main/todo.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KNUZcRZYOv0h",
        "outputId": "52e9474e-d577-46d3-a591-78f88502fa61"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "To-Do List Menu:\n",
            "1. View Tasks\n",
            "2. Add Task\n",
            "3. Remove Task\n",
            "4. Exit\n",
            "Enter your choice (1-4): 2\n",
            "Enter a new task: to complete task2\n",
            "Task 'to complete task2' added.\n",
            "\n",
            "To-Do List Menu:\n",
            "1. View Tasks\n",
            "2. Add Task\n",
            "3. Remove Task\n",
            "4. Exit\n",
            "Enter your choice (1-4): 2\n",
            "Enter a new task: buy groceries\n",
            "Task 'buy groceries' added.\n",
            "\n",
            "To-Do List Menu:\n",
            "1. View Tasks\n",
            "2. Add Task\n",
            "3. Remove Task\n",
            "4. Exit\n",
            "Enter your choice (1-4): 2\n",
            "Enter a new task: complete record\n",
            "Task 'complete record' added.\n",
            "\n",
            "To-Do List Menu:\n",
            "1. View Tasks\n",
            "2. Add Task\n",
            "3. Remove Task\n",
            "4. Exit\n",
            "Enter your choice (1-4): 3\n",
            "\n",
            "Your To-Do List:\n",
            "1. to complete task2\n",
            "2. buy groceries\n",
            "3. complete record\n",
            "\n",
            "Enter the number of the task to remove: 2\n",
            "Task 'buy groceries' removed.\n",
            "\n",
            "To-Do List Menu:\n",
            "1. View Tasks\n",
            "2. Add Task\n",
            "3. Remove Task\n",
            "4. Exit\n",
            "Enter your choice (1-4): 1\n",
            "\n",
            "Your To-Do List:\n",
            "1. to complete task2\n",
            "2. complete record\n",
            "\n",
            "\n",
            "To-Do List Menu:\n",
            "1. View Tasks\n",
            "2. Add Task\n",
            "3. Remove Task\n",
            "4. Exit\n",
            "Enter your choice (1-4): 4\n",
            "Goodbye!\n"
          ]
        }
      ],
      "source": [
        "# todo.py\n",
        "\n",
        "FILENAME = \"tasks.txt\"\n",
        "\n",
        "# Load tasks from file\n",
        "def load_tasks():\n",
        "    try:\n",
        "        with open(FILENAME, \"r\") as file:\n",
        "            return [task.strip() for task in file.readlines()]\n",
        "    except FileNotFoundError:\n",
        "        return []\n",
        "\n",
        "# Save tasks to file\n",
        "def save_tasks(tasks):\n",
        "    with open(FILENAME, \"w\") as file:\n",
        "        for task in tasks:\n",
        "            file.write(task + \"\\n\")\n",
        "\n",
        "# Add a task\n",
        "def add_task(tasks):\n",
        "    task = input(\"Enter a new task: \").strip()\n",
        "    if task:\n",
        "        tasks.append(task)\n",
        "        print(f\"Task '{task}' added.\")\n",
        "    else:\n",
        "        print(\"Task cannot be empty.\")\n",
        "\n",
        "# Remove a task\n",
        "def remove_task(tasks):\n",
        "    view_tasks(tasks)\n",
        "    try:\n",
        "        index = int(input(\"Enter the number of the task to remove: \")) - 1\n",
        "        if 0 <= index < len(tasks):\n",
        "            removed = tasks.pop(index)\n",
        "            print(f\"Task '{removed}' removed.\")\n",
        "        else:\n",
        "            print(\"Invalid task number.\")\n",
        "    except ValueError:\n",
        "        print(\"Please enter a valid number.\")\n",
        "\n",
        "# View all tasks\n",
        "def view_tasks(tasks):\n",
        "    if not tasks:\n",
        "        print(\"No tasks to show.\")\n",
        "    else:\n",
        "        print(\"\\nYour To-Do List:\")\n",
        "        for idx, task in enumerate(tasks, 1):\n",
        "            print(f\"{idx}. {task}\")\n",
        "        print()\n",
        "\n",
        "# Main loop\n",
        "def main():\n",
        "    tasks = load_tasks()\n",
        "\n",
        "    while True:\n",
        "        print(\"\\nTo-Do List Menu:\")\n",
        "        print(\"1. View Tasks\")\n",
        "        print(\"2. Add Task\")\n",
        "        print(\"3. Remove Task\")\n",
        "        print(\"4. Exit\")\n",
        "\n",
        "        choice = input(\"Enter your choice (1-4): \").strip()\n",
        "\n",
        "        if choice == \"1\":\n",
        "            view_tasks(tasks)\n",
        "        elif choice == \"2\":\n",
        "            add_task(tasks)\n",
        "            save_tasks(tasks)\n",
        "        elif choice == \"3\":\n",
        "            remove_task(tasks)\n",
        "            save_tasks(tasks)\n",
        "        elif choice == \"4\":\n",
        "            save_tasks(tasks)\n",
        "            print(\"Goodbye!\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Invalid choice. Please select 1-4.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ]
}